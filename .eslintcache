[{"/home/cory/websites/reddit-clone/creddit-frontend/src/index.js":"1","/home/cory/websites/reddit-clone/creddit-frontend/src/App.js":"2","/home/cory/websites/reddit-clone/creddit-frontend/src/components/NavBar.js":"3","/home/cory/websites/reddit-clone/creddit-frontend/src/components/LogIn.js":"4","/home/cory/websites/reddit-clone/creddit-frontend/src/components/LoadingIndicator.js":"5","/home/cory/websites/reddit-clone/creddit-frontend/src/components/posts/Posts.js":"6","/home/cory/websites/reddit-clone/creddit-frontend/src/components/posts/CreatePost.js":"7","/home/cory/websites/reddit-clone/creddit-frontend/src/components/posts/EditPost.js":"8","/home/cory/websites/reddit-clone/creddit-frontend/src/components/posts/PostDisplay.js":"9","/home/cory/websites/reddit-clone/creddit-frontend/src/components/posts/Post.js":"10","/home/cory/websites/reddit-clone/creddit-frontend/src/useOutsideComponent.js":"11","/home/cory/websites/reddit-clone/creddit-frontend/src/components/posts/Comment.js":"12","/home/cory/websites/reddit-clone/creddit-frontend/src/components/zones/CreateZone.js":"13","/home/cory/websites/reddit-clone/creddit-frontend/src/components/profile/Profile.js":"14","/home/cory/websites/reddit-clone/creddit-frontend/src/components/profile/Comment.js":"15"},{"size":305,"mtime":1607979079596,"results":"16","hashOfConfig":"17"},{"size":6663,"mtime":1608410153809,"results":"18","hashOfConfig":"17"},{"size":1140,"mtime":1608410126933,"results":"19","hashOfConfig":"17"},{"size":3748,"mtime":1608323671303,"results":"20","hashOfConfig":"17"},{"size":440,"mtime":1607971827697,"results":"21","hashOfConfig":"17"},{"size":2417,"mtime":1608329367464,"results":"22","hashOfConfig":"17"},{"size":1746,"mtime":1608406803961,"results":"23","hashOfConfig":"17"},{"size":1632,"mtime":1608323618493,"results":"24","hashOfConfig":"17"},{"size":4033,"mtime":1608412623929,"results":"25","hashOfConfig":"17"},{"size":6371,"mtime":1608338994268,"results":"26","hashOfConfig":"17"},{"size":729,"mtime":1607992449218,"results":"27","hashOfConfig":"17"},{"size":6498,"mtime":1608411164669,"results":"28","hashOfConfig":"17"},{"size":1512,"mtime":1608406795865,"results":"29","hashOfConfig":"17"},{"size":1584,"mtime":1608413052617,"results":"30","hashOfConfig":"17"},{"size":4575,"mtime":1608412444453,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"shvchk",{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/cory/websites/reddit-clone/creddit-frontend/src/index.js",[],["67","68"],"/home/cory/websites/reddit-clone/creddit-frontend/src/App.js",["69"],"/home/cory/websites/reddit-clone/creddit-frontend/src/components/NavBar.js",[],"/home/cory/websites/reddit-clone/creddit-frontend/src/components/LogIn.js",[],"/home/cory/websites/reddit-clone/creddit-frontend/src/components/LoadingIndicator.js",[],"/home/cory/websites/reddit-clone/creddit-frontend/src/components/posts/Posts.js",["70","71","72"],"import Axios from 'axios';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { trackPromise } from 'react-promise-tracker';\nimport PostDisplay from './PostDisplay';\nimport { InView } from 'react-intersection-observer';\n\nconst Posts = (props) => {\n  document.body.style.background = \"#dae0e6\";\n  const [zone, setZone] = useState({});\n  const [currentPage, setCurrentPage] = useState(1);\n\n  const perPage = 10;\n  const indexOfLastPost = currentPage * perPage;\n  const indexOfFirstPost = indexOfLastPost - perPage;\n  const currentPosts = props.posts.slice(indexOfFirstPost, indexOfLastPost)\n\n  const pageNumbers = [];\n  for (let i = 1; i <= Math.ceil(props.posts.length / perPage); i++) {\n    pageNumbers.push(i);\n  }\n\n  const handlePageClick = (e) => {\n    setCurrentPage(Number(e.target.id));\n  }\n\n  useEffect(() => {\n    trackPromise(getZone());\n  }, [props.currentZone]);\n\n\n  const getZone = async () => {\n    if (props.currentZone !== \"all\") {\n      const data = await Axios.get(`https://sleepy-inlet-08384.herokuapp.com/api/zones/${props.currentZone}`)\n      setZone(data.data);\n    } else {\n      setZone({\n        name: \"All\",\n        creator: \"Cory S\",\n        description: \"The best posts from all of Creddit\"\n      })\n    }\n  }\n\n  const postList = () => {\n    return currentPosts.map(post => {\n      return <PostDisplay key={post._id} user={props.user} token={props.token} deletePost={props.deletePost} post={post} />\n    });\n  }\n\n  const pageNumbersList = pageNumbers.map(num => {\n    return (\n      <li\n        key={num}\n        id={num}\n        onClick={handlePageClick}\n        className={num === currentPage ? \"current-page\" : null}\n      >\n        {num}\n      </li>\n    );\n  });\n\n  return (\n    <div>\n      {zone &&\n      <div className=\"post-wrapper zone-info\">\n          <h3>{zone.name && zone.name.charAt(0).toUpperCase() + zone.name.slice(1)}</h3>\n          <h5>{zone.description && zone.description}</h5>\n        <select className=\"select-menu\" name=\"zone\" onChange={props.changeZoneSelect} value={props.currentZone}>\n        <option value=\"all\">All</option>\n        {props.zones.length > 0 && props.zones.map(zone => {\n          return (<option value={zone._id}>{zone.name}</option>)\n        })}\n        </select>\n      </div>\n      }\n      {postList()}\n      <div className=\"post-wrapper page-nums\">\n        {pageNumbersList}\n      </div>\n    </div>\n  );\n}\n\nexport default Posts;",["73","74"],"/home/cory/websites/reddit-clone/creddit-frontend/src/components/posts/CreatePost.js",[],"/home/cory/websites/reddit-clone/creddit-frontend/src/components/posts/EditPost.js",[],"/home/cory/websites/reddit-clone/creddit-frontend/src/components/posts/PostDisplay.js",["75"],"/home/cory/websites/reddit-clone/creddit-frontend/src/components/posts/Post.js",["76"],"/* eslint-disable react-hooks/exhaustive-deps */\nimport Axios from 'axios';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { trackPromise } from 'react-promise-tracker';\nimport Comment from './Comment';\nimport './post.css';\nimport ChatIcon from '@material-ui/icons/Chat';\nimport ArrowDropUpIcon from '@material-ui/icons/ArrowDropUp';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport moment from 'moment';\n\nconst Post = (props) => {\n  document.body.style.background = \"#2e2f2f\";\n  const [post, setPost] = useState(null);\n  const [comments, setComments] = useState([]);\n\n  const [newComment, setNewComment] = useState({ body: \"\" })\n  \n  const [votes, setVotes] = useState(0);\n  const [voteId, setVoteId] = useState('');\n  const [upvote, setUpvote] = useState('');\n  const [downvote, setDownvote] = useState('');\n\n  useEffect(() => {\n    trackPromise(getPost());\n  }, [])\n\n  useEffect(() => {\n    trackPromise(getVotes());\n  }, [post])\n\n  const getVotes = async () => {\n    const data = await Axios.get(`https://sleepy-inlet-08384.herokuapp.com/api/votes/posts/${post._id}`);\n    const newVotes = data.data;\n    let total = 0;\n    // Checks if any votes are from current user. If so, store vote ID.\n    newVotes.forEach(vote => {\n      if (props.user && vote.user === props.user._id) {\n        setVoteId(vote._id);\n        vote.vote > 0 ? setUpvote('voted') : setDownvote('voted');\n      }\n      total += vote.vote;\n    })\n    setVotes(total);\n  }\n\n  const handleUpvote = (e) => {\n    if (props.user) {\n      if (upvote === 'voted') {\n        setUpvote('')\n        removeVote();\n        setVotes(votes - 1);\n      } else {\n        setUpvote('voted')\n        if (downvote === 'voted') {\n          setDownvote('');\n          removeVote();\n          setVotes(votes + 2);\n        } else {\n          setVotes(votes + 1);\n        }\n        addVote(1);\n      }\n    } else {\n      alert('You must be logged in to vote on comments');\n    }\n  }\n\n  const handleDownvote = (e) => {\n    if (props.user) {\n      if (downvote === 'voted') {\n      setDownvote('')\n      removeVote();\n      setVotes(votes + 1);\n    } else {\n      setDownvote('voted')\n      if (upvote === 'voted') {\n        setUpvote('');\n        removeVote();\n        setVotes(votes - 2);\n      } else {\n        setVotes(votes - 1);\n      }\n      addVote(-1);\n    }\n    } else {\n      alert('You must be logged in to vote on comments');\n    }\n  }\n\n  const removeVote = async () => {\n    const config = {\n      headers: {\n        'auth-token': props.token\n      }\n    }\n    await Axios.delete(`https://sleepy-inlet-08384.herokuapp.com/api/votes/${voteId}`, config);\n  }\n\n  const addVote = async (vote) => {\n    const newVote = {\n      user: props.user, vote, post: post._id\n    }\n    const config = {\n      headers: {\n        'auth-token': props.token\n      }\n    }\n    const data = await Axios.post(`https://sleepy-inlet-08384.herokuapp.com/api/votes/`, newVote, config);\n    setVoteId(data.data._id);\n  }\n  \n  const getPost = async () => {\n    const data = await Axios.get(`https://sleepy-inlet-08384.herokuapp.com/api/posts/${props.match.params.id}`);\n    setPost(data.data);\n    setComments(data.data.comments);\n  }\n\n  const handleCommentSubmit = async (e) => {\n    e.preventDefault();\n    const config = {\n      headers: {\n        'auth-token': props.token\n      }\n    }\n    const comment = { ...newComment, username: props.user._id, post: e.target.className }\n    const data = await Axios.post(`https://sleepy-inlet-08384.herokuapp.com/api/comments`, comment, config);\n    setComments([...comments, data.data]);\n    setNewComment({ body: \"\" });\n    scrollToBottom();\n  }\n\n  const handleCommentChange = (e) => {\n    setNewComment({ body: e.target.value })\n  }\n\n  const commentList = comments.map((comment) => {\n    if (!comment.parent) {\n      return <Comment user={props.user ? props.user : null} token={props.token} nested=\"0\" post={post} comment={comment} />\n    }\n  });\n\n  const scrollToBottom = () => {\n    messagesEnd.current.scrollIntoView({ behavior: \"smooth\" });\n  }\n\n  const messagesEnd = useRef(\"\");\n  \n\n  return (\n    <div className=\"post-wrapper min-height\">\n      <div className=\"post-info-header\">\n        <div className=\"post-header-title\">\n          <ChatIcon fontSize=\"small\" />\n          {post && <h3>{post.title}</h3>}\n        </div>\n      </div>\n      <div className=\"post-content\">\n        <div className=\"post-op\">\n          <div className=\"op-header\">\n            <p className=\"sub-label\">c/{post && post.zone ? post.zone.name : null}</p>\n            {post && <p className=\"op-header-light\">Posted by {post.user.username}</p>} \n            <p className=\"op-header-light\">{post && moment(post.date).format('MMMM Do YYYY')}</p>\n          </div>\n            <div className=\"comment-vote\">\n              <div className=\"vote-grid\">\n                <ArrowDropUpIcon onClick={handleUpvote} className={`vote-arrow ${upvote}`} fontSize=\"inherit\" />\n                <p className=\"upvote-count\">{votes}</p>\n                <ArrowDropDownIcon onClick={handleDownvote} className={`vote-arrow row-3 ${downvote}`} fontSize=\"inherit\" />\n              </div>\n              {post && <h3 className=\"op-title\">{post.title}</h3>}\n            </div>\n          {post && post.image && <img src={post.image} alt={`${post.title}`} className=\"post-image\" />}\n          {post && <p className=\"op-body\">{post.body}</p>}\n        {post && props.user && props.user.email === post.user.email && <button className=\"post-btn\" onClick={() => props.deletePost(post)}>Delete</button>}\n        {post && props.user && props.user.email === post.user.email && <Link className=\"post-btn\" to={`/edit/${post._id}`}>Edit</Link>}\n        </div>\n        <div className=\"comment-response-wrapper\">\n          {props.user && post && <form className={post._id} onSubmit={handleCommentSubmit}>\n            <textarea name=\"body\" value={newComment.body} onChange={handleCommentChange}></textarea><br/>\n            <button className=\"post-btn\" type=\"submit\">Submit</button>\n          </form>}\n        </div>\n        {comments && <p>{comments.length} Comment{comments.length === 1 ? \"\" : \"s\"}</p>}\n        {!props.user && <div className=\"divider\"></div>}\n        {commentList}\n      </div>\n      <div ref={messagesEnd}></div>\n    </div>\n  );\n}\n\nexport default Post;","/home/cory/websites/reddit-clone/creddit-frontend/src/useOutsideComponent.js",[],"/home/cory/websites/reddit-clone/creddit-frontend/src/components/posts/Comment.js",["77"],"/home/cory/websites/reddit-clone/creddit-frontend/src/components/zones/CreateZone.js",["78"],"import Axios from 'axios';\nimport React, { useEffect, useState } from 'react';\n\nconst CreateZone = (props) => {\n  document.body.style.background = \"#dae0e6\";\n  const [newZone, setNewZone] = useState({ name: \"\", description: \"\" })\n\n  const onChange = (e) => {\n    setNewZone({\n      ...newZone,\n      [e.target.name]: e.target.value\n    });\n  }\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const config = {\n      headers: {\n        'auth-token': props.token\n      }\n    }\n\n    try {\n      await Axios.post(`https://sleepy-inlet-08384.herokuapp.com/api/zones`, { ...newZone, creator: props.user._id }, config);\n      window.location = '/';\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  if (props.user) {\n      return (\n        <div className=\"post-wrapper \">\n          <div className=\"create-and-profile-head\">\n            <h3>Create Zone</h3>\n          </div>\n          <form onSubmit={handleSubmit} className=\"post-form\">\n            <label>Name:</label><br/>\n            <input className=\"create-title\" type=\"text\" name=\"name\" value={newZone.name} onChange={onChange} /><br/><br/>\n            <label>Description:</label><br/>\n            <input className=\"create-title\" type=\"text\" name=\"description\" value={newZone.description} onChange={onChange} /><br/><br/>\n            <button>Submit Post</button>\n          </form>\n        </div>\n    );\n  } else {\n    return (\n      <div className=\"post-wrapper\">You need to be logged in.</div>\n    )\n  }\n}\n\nexport default CreateZone;","/home/cory/websites/reddit-clone/creddit-frontend/src/components/profile/Profile.js",["79","80"],"/home/cory/websites/reddit-clone/creddit-frontend/src/components/profile/Comment.js",["81"],{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","severity":1,"message":"87","line":159,"column":11,"nodeType":"88","messageId":"89","endLine":159,"endColumn":15},{"ruleId":"86","severity":1,"message":"90","line":2,"column":28,"nodeType":"88","messageId":"89","endLine":2,"endColumn":34},{"ruleId":"86","severity":1,"message":"91","line":5,"column":10,"nodeType":"88","messageId":"89","endLine":5,"endColumn":16},{"ruleId":"92","severity":1,"message":"93","line":28,"column":6,"nodeType":"94","endLine":28,"endColumn":25,"suggestions":"95"},{"ruleId":"82","replacedBy":"96"},{"ruleId":"84","replacedBy":"97"},{"ruleId":"86","severity":1,"message":"87","line":86,"column":11,"nodeType":"88","messageId":"89","endLine":86,"endColumn":15},{"ruleId":"98","severity":1,"message":"99","line":138,"column":46,"nodeType":"100","messageId":"101","endLine":138,"endColumn":48},{"ruleId":"92","severity":1,"message":"102","line":28,"column":6,"nodeType":"94","endLine":28,"endColumn":8,"suggestions":"103"},{"ruleId":"86","severity":1,"message":"104","line":2,"column":17,"nodeType":"88","messageId":"89","endLine":2,"endColumn":26},{"ruleId":"92","severity":1,"message":"105","line":14,"column":6,"nodeType":"94","endLine":14,"endColumn":8,"suggestions":"106"},{"ruleId":"98","severity":1,"message":"99","line":26,"column":48,"nodeType":"100","messageId":"101","endLine":26,"endColumn":50},{"ruleId":"92","severity":1,"message":"107","line":21,"column":6,"nodeType":"94","endLine":21,"endColumn":8,"suggestions":"108"},"no-native-reassign",["109"],"no-negated-in-lhs",["110"],"no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","'useRef' is defined but never used.","'InView' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getZone'. Either include it or remove the dependency array.","ArrayExpression",["111"],["109"],["110"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has missing dependencies: 'comment.children', 'fetchUser', and 'getVotes'. Either include them or remove the dependency array.",["112"],"'useEffect' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchUser'. Either include it or remove the dependency array.",["113"],"React Hook useEffect has missing dependencies: 'fetchUser' and 'getVotes'. Either include them or remove the dependency array.",["114"],"no-global-assign","no-unsafe-negation",{"desc":"115","fix":"116"},{"desc":"117","fix":"118"},{"desc":"119","fix":"120"},{"desc":"121","fix":"122"},"Update the dependencies array to be: [getZone, props.currentZone]",{"range":"123","text":"124"},"Update the dependencies array to be: [comment.children, fetchUser, getVotes]",{"range":"125","text":"126"},"Update the dependencies array to be: [fetchUser]",{"range":"127","text":"128"},"Update the dependencies array to be: [fetchUser, getVotes]",{"range":"129","text":"130"},[868,887],"[getZone, props.currentZone]",[1091,1093],"[comment.children, fetchUser, getVotes]",[426,428],"[fetchUser]",[764,766],"[fetchUser, getVotes]"]