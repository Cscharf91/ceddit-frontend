[{"/home/cory/websites/reddit-clone/creddit-frontend/src/index.js":"1","/home/cory/websites/reddit-clone/creddit-frontend/src/App.js":"2","/home/cory/websites/reddit-clone/creddit-frontend/src/components/NavBar.js":"3","/home/cory/websites/reddit-clone/creddit-frontend/src/components/LogIn.js":"4","/home/cory/websites/reddit-clone/creddit-frontend/src/components/LoadingIndicator.js":"5","/home/cory/websites/reddit-clone/creddit-frontend/src/components/posts/Posts.js":"6","/home/cory/websites/reddit-clone/creddit-frontend/src/components/posts/CreatePost.js":"7","/home/cory/websites/reddit-clone/creddit-frontend/src/components/posts/EditPost.js":"8","/home/cory/websites/reddit-clone/creddit-frontend/src/components/posts/PostDisplay.js":"9","/home/cory/websites/reddit-clone/creddit-frontend/src/components/posts/Post.js":"10","/home/cory/websites/reddit-clone/creddit-frontend/src/useOutsideComponent.js":"11","/home/cory/websites/reddit-clone/creddit-frontend/src/components/posts/Comment.js":"12"},{"size":305,"mtime":1607979079596,"results":"13","hashOfConfig":"14"},{"size":3898,"mtime":1608059303853,"results":"15","hashOfConfig":"14"},{"size":982,"mtime":1608058954725,"results":"16","hashOfConfig":"14"},{"size":3710,"mtime":1608059477765,"results":"17","hashOfConfig":"14"},{"size":440,"mtime":1607971827697,"results":"18","hashOfConfig":"14"},{"size":432,"mtime":1608090986698,"results":"19","hashOfConfig":"14"},{"size":650,"mtime":1608090958126,"results":"20","hashOfConfig":"14"},{"size":1488,"mtime":1607975626147,"results":"21","hashOfConfig":"14"},{"size":1486,"mtime":1608145734507,"results":"22","hashOfConfig":"14"},{"size":2322,"mtime":1608145552583,"results":"23","hashOfConfig":"14"},{"size":729,"mtime":1607992449218,"results":"24","hashOfConfig":"14"},{"size":1587,"mtime":1608145185159,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"shvchk",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},"/home/cory/websites/reddit-clone/creddit-frontend/src/index.js",[],["53","54"],"/home/cory/websites/reddit-clone/creddit-frontend/src/App.js",[],"/home/cory/websites/reddit-clone/creddit-frontend/src/components/NavBar.js",[],"/home/cory/websites/reddit-clone/creddit-frontend/src/components/LogIn.js",[],"/home/cory/websites/reddit-clone/creddit-frontend/src/components/LoadingIndicator.js",[],"/home/cory/websites/reddit-clone/creddit-frontend/src/components/posts/Posts.js",[],"/home/cory/websites/reddit-clone/creddit-frontend/src/components/posts/CreatePost.js",[],"/home/cory/websites/reddit-clone/creddit-frontend/src/components/posts/EditPost.js",[],"/home/cory/websites/reddit-clone/creddit-frontend/src/components/posts/PostDisplay.js",[],"/home/cory/websites/reddit-clone/creddit-frontend/src/components/posts/Post.js",["55"],"import Axios from 'axios';\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { trackPromise } from 'react-promise-tracker';\nimport Comment from './Comment';\nimport './post.css';\nimport ChatIcon from '@material-ui/icons/Chat';\nimport ArrowDropUpIcon from '@material-ui/icons/ArrowDropUp';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\n\nconst Post = (props) => {\n  document.body.style.background = \"#2e2f2f\";\n  const [post, setPost] = useState(null);\n  const [comments, setComments] = useState([]);\n\n  useEffect(() => {\n    trackPromise(getPost());\n  }, [])\n  \n  const getPost = async () => {\n    const data = await Axios.get(`http://localhost:5000/api/posts/${props.match.params.id}`);\n    setPost(data.data);\n    console.log(data.data.comments);\n    setComments(data.data.comments);\n  }\n  const commentList = comments.map((comment) => {\n    return <Comment nested=\"0\" comment={comment} />\n  });\n\n  return (\n    <div className=\"post-wrapper\">\n      <div className=\"post-info-header\">\n        <div className=\"post-header-title\">\n          <ChatIcon fontSize=\"small\" />\n          {post && <h3>{post.title}</h3>}\n        </div>\n      </div>\n      <div className=\"post-content\">\n        <div className=\"post-op\">\n          <div className=\"op-header\">\n            <p className=\"sub-label\">c/random</p>\n            {post && <p className=\"op-header-light\">Posted by {post.user.username}</p>} \n            <p className=\"op-header-light\">2 days ago</p>\n          </div>\n          <div className=\"op-votes-title\">\n            <div className=\"votes\">\n              <ArrowDropUpIcon fontSize=\"large\" />\n              <p className=\"upvote-count\">500</p>\n              <ArrowDropDownIcon className=\"row-3\" fontSize=\"large\" />\n            </div>\n            {post && <h3 className=\"op-title\">{post.title}</h3>}\n          </div>\n          {post && <p className=\"op-body\">{post.body}</p>}\n        {post && props.user && props.user.email === post.user.email && <button className=\"post-btn\" onClick={() => props.deletePost(post)}>Delete</button>}\n        {post && props.user && props.user.email === post.user.email && <Link className=\"post-btn\" to={`/edit/${post._id}`}>Edit</Link>}\n        </div>\n        {commentList}\n      </div>\n    </div>\n  );\n}\n\nexport default Post;","/home/cory/websites/reddit-clone/creddit-frontend/src/useOutsideComponent.js",[],"/home/cory/websites/reddit-clone/creddit-frontend/src/components/posts/Comment.js",["56"],"import React, { useEffect, useState } from 'react';\nimport ArrowDropUpIcon from '@material-ui/icons/ArrowDropUp';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport Axios from 'axios';\n\nconst Comment = (props) => {\n  const [nestedComments, setNestedComments] = useState(null);\n  const [commentUser, setCommentUser] = useState(null);\n  const nested = parseInt(props.nested);\n\n  useEffect(() => {\n    fetchUser();\n    const listComm = props.comment.children.length > 0 ? [...props.comment.children] : null;\n    if (listComm) {\n      console.log(\"nested comments: \", listComm);\n      setNestedComments(listComm);\n    }\n  }, []);\n\n  const fetchUser = async () => {\n    try {\n      const data = await Axios.get(`http://localhost:5000/api/users/${props.comment.username}`);\n      setCommentUser(data.data.username);\n    } catch(err) {\n      console.log(err);\n    }\n  }\n\n  return (\n    <div className={`comment nested-${props.nested}`}>\n      <div className=\"comment-vote\">\n          <ArrowDropUpIcon fontSize=\"large\" />\n          <p className=\"upvote-count\">500</p>\n          <ArrowDropDownIcon className=\"row-3\" fontSize=\"large\" />\n        <p className=\"comment-user\">{commentUser}</p>\n        <div className=\"op-header\">\n            <p className=\"op-header-light\">2 days ago</p>\n        </div>\n      </div>\n      <p className=\"comment-body\">{props.comment.body}</p>\n      \n      {nestedComments && nestedComments.map(comment => {\n         return (<Comment key={comment._id} nested={nested + 1} comment={comment} />)\n       })}\n    </div>\n  );\n}\n\nexport default Comment;",{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":18,"column":6,"nodeType":"63","endLine":18,"endColumn":8,"suggestions":"64"},{"ruleId":"61","severity":1,"message":"65","line":18,"column":6,"nodeType":"63","endLine":18,"endColumn":8,"suggestions":"66"},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getPost'. Either include it or remove the dependency array.","ArrayExpression",["69"],"React Hook useEffect has missing dependencies: 'fetchUser' and 'props.comment.children'. Either include them or remove the dependency array.",["70"],"no-global-assign","no-unsafe-negation",{"desc":"71","fix":"72"},{"desc":"73","fix":"74"},"Update the dependencies array to be: [getPost]",{"range":"75","text":"76"},"Update the dependencies array to be: [fetchUser, props.comment.children]",{"range":"77","text":"78"},[622,624],"[getPost]",[643,645],"[fetchUser, props.comment.children]"]