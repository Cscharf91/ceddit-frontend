[{"/home/cory/websites/reddit-clone/creddit-frontend/src/index.js":"1","/home/cory/websites/reddit-clone/creddit-frontend/src/App.js":"2","/home/cory/websites/reddit-clone/creddit-frontend/src/components/NavBar.js":"3","/home/cory/websites/reddit-clone/creddit-frontend/src/components/LogIn.js":"4","/home/cory/websites/reddit-clone/creddit-frontend/src/components/LoadingIndicator.js":"5","/home/cory/websites/reddit-clone/creddit-frontend/src/components/posts/Posts.js":"6","/home/cory/websites/reddit-clone/creddit-frontend/src/components/posts/CreatePost.js":"7","/home/cory/websites/reddit-clone/creddit-frontend/src/components/posts/EditPost.js":"8","/home/cory/websites/reddit-clone/creddit-frontend/src/components/posts/PostDisplay.js":"9","/home/cory/websites/reddit-clone/creddit-frontend/src/components/posts/Post.js":"10","/home/cory/websites/reddit-clone/creddit-frontend/src/useOutsideComponent.js":"11","/home/cory/websites/reddit-clone/creddit-frontend/src/components/posts/Comment.js":"12"},{"size":305,"mtime":1607979079596,"results":"13","hashOfConfig":"14"},{"size":6248,"mtime":1608226563015,"results":"15","hashOfConfig":"14"},{"size":982,"mtime":1608058954725,"results":"16","hashOfConfig":"14"},{"size":3710,"mtime":1608059477765,"results":"17","hashOfConfig":"14"},{"size":440,"mtime":1607971827697,"results":"18","hashOfConfig":"14"},{"size":432,"mtime":1608090986698,"results":"19","hashOfConfig":"14"},{"size":1447,"mtime":1608226551247,"results":"20","hashOfConfig":"14"},{"size":1488,"mtime":1607975626147,"results":"21","hashOfConfig":"14"},{"size":1362,"mtime":1608226987851,"results":"22","hashOfConfig":"14"},{"size":2548,"mtime":1608226717927,"results":"23","hashOfConfig":"14"},{"size":729,"mtime":1607992449218,"results":"24","hashOfConfig":"14"},{"size":1537,"mtime":1608149185054,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"shvchk",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"39"},"/home/cory/websites/reddit-clone/creddit-frontend/src/index.js",[],["53","54"],"/home/cory/websites/reddit-clone/creddit-frontend/src/App.js",[],"/home/cory/websites/reddit-clone/creddit-frontend/src/components/NavBar.js",[],"/home/cory/websites/reddit-clone/creddit-frontend/src/components/LogIn.js",[],"/home/cory/websites/reddit-clone/creddit-frontend/src/components/LoadingIndicator.js",[],"/home/cory/websites/reddit-clone/creddit-frontend/src/components/posts/Posts.js",[],["55","56"],"/home/cory/websites/reddit-clone/creddit-frontend/src/components/posts/CreatePost.js",["57","58","59"],"/home/cory/websites/reddit-clone/creddit-frontend/src/components/posts/EditPost.js",[],"/home/cory/websites/reddit-clone/creddit-frontend/src/components/posts/PostDisplay.js",[],"/home/cory/websites/reddit-clone/creddit-frontend/src/components/posts/Post.js",["60"],"/home/cory/websites/reddit-clone/creddit-frontend/src/useOutsideComponent.js",[],"/home/cory/websites/reddit-clone/creddit-frontend/src/components/posts/Comment.js",["61"],"import React, { useEffect, useState } from 'react';\nimport ArrowDropUpIcon from '@material-ui/icons/ArrowDropUp';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport Axios from 'axios';\n\nconst Comment = (props) => {\n  const [nestedComments, setNestedComments] = useState(null);\n  const [commentUser, setCommentUser] = useState(null);\n  const nested = parseInt(props.nested);\n\n  useEffect(() => {\n    fetchUser();\n    const listComm = props.comment.children.length > 0 ? [...props.comment.children] : null;\n    if (listComm) {\n      setNestedComments(listComm);\n    }\n  }, []);\n\n  const fetchUser = async () => {\n    try {\n      const data = await Axios.get(`http://localhost:5000/api/users/${props.comment.username}`);\n      setCommentUser(data.data.username);\n    } catch(err) {\n      console.log(err);\n    }\n  }\n\n  return (\n    <div className={`comment nested-${props.nested}`}>\n      <div className=\"comment-vote\">\n          <ArrowDropUpIcon fontSize=\"large\" />\n          <p className=\"upvote-count\">500</p>\n          <ArrowDropDownIcon className=\"row-3\" fontSize=\"large\" />\n        <p className=\"comment-user\">{commentUser}</p>\n        <div className=\"op-header\">\n            <p className=\"op-header-light\">2 days ago</p>\n        </div>\n      </div>\n      <p className=\"comment-body\">{props.comment.body}</p>\n      \n      {nestedComments && nestedComments.map(comment => {\n         return (<Comment key={comment._id} nested={nested + 1} comment={comment} />)\n       })}\n    </div>\n  );\n}\n\nexport default Comment;",{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"62","replacedBy":"66"},{"ruleId":"64","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":1,"column":8,"nodeType":"70","messageId":"71","endLine":1,"endColumn":13},{"ruleId":"68","severity":1,"message":"72","line":2,"column":28,"nodeType":"70","messageId":"71","endLine":2,"endColumn":36},{"ruleId":"73","severity":1,"message":"74","line":10,"column":6,"nodeType":"75","endLine":10,"endColumn":8,"suggestions":"76"},{"ruleId":"73","severity":1,"message":"77","line":19,"column":6,"nodeType":"75","endLine":19,"endColumn":8,"suggestions":"78"},{"ruleId":"73","severity":1,"message":"79","line":17,"column":6,"nodeType":"75","endLine":17,"endColumn":8,"suggestions":"80"},"no-native-reassign",["81"],"no-negated-in-lhs",["82"],["81"],["82"],"no-unused-vars","'Axios' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["83"],"React Hook useEffect has a missing dependency: 'getPost'. Either include it or remove the dependency array.",["84"],"React Hook useEffect has missing dependencies: 'fetchUser' and 'props.comment.children'. Either include them or remove the dependency array.",["85"],"no-global-assign","no-unsafe-negation",{"desc":"86","fix":"87"},{"desc":"88","fix":"89"},{"desc":"90","fix":"91"},"Update the dependencies array to be: [props]",{"range":"92","text":"93"},"Update the dependencies array to be: [getPost]",{"range":"94","text":"95"},"Update the dependencies array to be: [fetchUser, props.comment.children]",{"range":"96","text":"97"},[274,276],"[props]",[651,653],"[getPost]",[593,595],"[fetchUser, props.comment.children]"]