[{"/home/cory/websites/reddit-clone/creddit-frontend/src/index.js":"1","/home/cory/websites/reddit-clone/creddit-frontend/src/App.js":"2","/home/cory/websites/reddit-clone/creddit-frontend/src/components/NavBar.js":"3","/home/cory/websites/reddit-clone/creddit-frontend/src/components/LogIn.js":"4","/home/cory/websites/reddit-clone/creddit-frontend/src/components/LoadingIndicator.js":"5","/home/cory/websites/reddit-clone/creddit-frontend/src/components/posts/Posts.js":"6","/home/cory/websites/reddit-clone/creddit-frontend/src/components/posts/CreatePost.js":"7","/home/cory/websites/reddit-clone/creddit-frontend/src/components/posts/EditPost.js":"8","/home/cory/websites/reddit-clone/creddit-frontend/src/components/posts/PostDisplay.js":"9","/home/cory/websites/reddit-clone/creddit-frontend/src/components/posts/Post.js":"10","/home/cory/websites/reddit-clone/creddit-frontend/src/useOutsideComponent.js":"11","/home/cory/websites/reddit-clone/creddit-frontend/src/components/posts/Comment.js":"12","/home/cory/websites/reddit-clone/creddit-frontend/src/components/zones/CreateZone.js":"13","/home/cory/websites/reddit-clone/creddit-frontend/src/components/profile/Profile.js":"14","/home/cory/websites/reddit-clone/creddit-frontend/src/components/profile/Comment.js":"15"},{"size":305,"mtime":1607979079596,"results":"16","hashOfConfig":"17"},{"size":6663,"mtime":1608410153809,"results":"18","hashOfConfig":"17"},{"size":1140,"mtime":1608410126933,"results":"19","hashOfConfig":"17"},{"size":3748,"mtime":1608323671303,"results":"20","hashOfConfig":"17"},{"size":440,"mtime":1607971827697,"results":"21","hashOfConfig":"17"},{"size":2417,"mtime":1608329367464,"results":"22","hashOfConfig":"17"},{"size":1746,"mtime":1608406803961,"results":"23","hashOfConfig":"17"},{"size":1632,"mtime":1608323618493,"results":"24","hashOfConfig":"17"},{"size":4079,"mtime":1608414217213,"results":"25","hashOfConfig":"17"},{"size":6562,"mtime":1608414092357,"results":"26","hashOfConfig":"17"},{"size":729,"mtime":1607992449218,"results":"27","hashOfConfig":"17"},{"size":6498,"mtime":1608411164669,"results":"28","hashOfConfig":"17"},{"size":1512,"mtime":1608406795865,"results":"29","hashOfConfig":"17"},{"size":1584,"mtime":1608413052617,"results":"30","hashOfConfig":"17"},{"size":4575,"mtime":1608412444453,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"shvchk",{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/cory/websites/reddit-clone/creddit-frontend/src/index.js",[],["66","67"],"/home/cory/websites/reddit-clone/creddit-frontend/src/App.js",["68"],"/home/cory/websites/reddit-clone/creddit-frontend/src/components/NavBar.js",[],"/home/cory/websites/reddit-clone/creddit-frontend/src/components/LogIn.js",[],"/home/cory/websites/reddit-clone/creddit-frontend/src/components/LoadingIndicator.js",[],"/home/cory/websites/reddit-clone/creddit-frontend/src/components/posts/Posts.js",["69","70","71"],"import Axios from 'axios';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { trackPromise } from 'react-promise-tracker';\nimport PostDisplay from './PostDisplay';\nimport { InView } from 'react-intersection-observer';\n\nconst Posts = (props) => {\n  document.body.style.background = \"#dae0e6\";\n  const [zone, setZone] = useState({});\n  const [currentPage, setCurrentPage] = useState(1);\n\n  const perPage = 10;\n  const indexOfLastPost = currentPage * perPage;\n  const indexOfFirstPost = indexOfLastPost - perPage;\n  const currentPosts = props.posts.slice(indexOfFirstPost, indexOfLastPost)\n\n  const pageNumbers = [];\n  for (let i = 1; i <= Math.ceil(props.posts.length / perPage); i++) {\n    pageNumbers.push(i);\n  }\n\n  const handlePageClick = (e) => {\n    setCurrentPage(Number(e.target.id));\n  }\n\n  useEffect(() => {\n    trackPromise(getZone());\n  }, [props.currentZone]);\n\n\n  const getZone = async () => {\n    if (props.currentZone !== \"all\") {\n      const data = await Axios.get(`https://sleepy-inlet-08384.herokuapp.com/api/zones/${props.currentZone}`)\n      setZone(data.data);\n    } else {\n      setZone({\n        name: \"All\",\n        creator: \"Cory S\",\n        description: \"The best posts from all of Creddit\"\n      })\n    }\n  }\n\n  const postList = () => {\n    return currentPosts.map(post => {\n      return <PostDisplay key={post._id} user={props.user} token={props.token} deletePost={props.deletePost} post={post} />\n    });\n  }\n\n  const pageNumbersList = pageNumbers.map(num => {\n    return (\n      <li\n        key={num}\n        id={num}\n        onClick={handlePageClick}\n        className={num === currentPage ? \"current-page\" : null}\n      >\n        {num}\n      </li>\n    );\n  });\n\n  return (\n    <div>\n      {zone &&\n      <div className=\"post-wrapper zone-info\">\n          <h3>{zone.name && zone.name.charAt(0).toUpperCase() + zone.name.slice(1)}</h3>\n          <h5>{zone.description && zone.description}</h5>\n        <select className=\"select-menu\" name=\"zone\" onChange={props.changeZoneSelect} value={props.currentZone}>\n        <option value=\"all\">All</option>\n        {props.zones.length > 0 && props.zones.map(zone => {\n          return (<option value={zone._id}>{zone.name}</option>)\n        })}\n        </select>\n      </div>\n      }\n      {postList()}\n      <div className=\"post-wrapper page-nums\">\n        {pageNumbersList}\n      </div>\n    </div>\n  );\n}\n\nexport default Posts;",["72","73"],"/home/cory/websites/reddit-clone/creddit-frontend/src/components/posts/CreatePost.js",[],"/home/cory/websites/reddit-clone/creddit-frontend/src/components/posts/EditPost.js",[],"/home/cory/websites/reddit-clone/creddit-frontend/src/components/posts/PostDisplay.js",["74"],"/home/cory/websites/reddit-clone/creddit-frontend/src/components/posts/Post.js",["75"],"/home/cory/websites/reddit-clone/creddit-frontend/src/useOutsideComponent.js",[],"/home/cory/websites/reddit-clone/creddit-frontend/src/components/posts/Comment.js",["76"],"/home/cory/websites/reddit-clone/creddit-frontend/src/components/zones/CreateZone.js",["77"],"import Axios from 'axios';\nimport React, { useEffect, useState } from 'react';\n\nconst CreateZone = (props) => {\n  document.body.style.background = \"#dae0e6\";\n  const [newZone, setNewZone] = useState({ name: \"\", description: \"\" })\n\n  const onChange = (e) => {\n    setNewZone({\n      ...newZone,\n      [e.target.name]: e.target.value\n    });\n  }\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const config = {\n      headers: {\n        'auth-token': props.token\n      }\n    }\n\n    try {\n      await Axios.post(`https://sleepy-inlet-08384.herokuapp.com/api/zones`, { ...newZone, creator: props.user._id }, config);\n      window.location = '/';\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  if (props.user) {\n      return (\n        <div className=\"post-wrapper \">\n          <div className=\"create-and-profile-head\">\n            <h3>Create Zone</h3>\n          </div>\n          <form onSubmit={handleSubmit} className=\"post-form\">\n            <label>Name:</label><br/>\n            <input className=\"create-title\" type=\"text\" name=\"name\" value={newZone.name} onChange={onChange} /><br/><br/>\n            <label>Description:</label><br/>\n            <input className=\"create-title\" type=\"text\" name=\"description\" value={newZone.description} onChange={onChange} /><br/><br/>\n            <button>Submit Post</button>\n          </form>\n        </div>\n    );\n  } else {\n    return (\n      <div className=\"post-wrapper\">You need to be logged in.</div>\n    )\n  }\n}\n\nexport default CreateZone;","/home/cory/websites/reddit-clone/creddit-frontend/src/components/profile/Profile.js",["78","79"],"/home/cory/websites/reddit-clone/creddit-frontend/src/components/profile/Comment.js",["80"],{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","severity":1,"message":"86","line":159,"column":11,"nodeType":"87","messageId":"88","endLine":159,"endColumn":15},{"ruleId":"85","severity":1,"message":"89","line":2,"column":28,"nodeType":"87","messageId":"88","endLine":2,"endColumn":34},{"ruleId":"85","severity":1,"message":"90","line":5,"column":10,"nodeType":"87","messageId":"88","endLine":5,"endColumn":16},{"ruleId":"91","severity":1,"message":"92","line":28,"column":6,"nodeType":"93","endLine":28,"endColumn":25,"suggestions":"94"},{"ruleId":"81","replacedBy":"95"},{"ruleId":"83","replacedBy":"96"},{"ruleId":"85","severity":1,"message":"86","line":86,"column":11,"nodeType":"87","messageId":"88","endLine":86,"endColumn":15},{"ruleId":"97","severity":1,"message":"98","line":138,"column":46,"nodeType":"99","messageId":"100","endLine":138,"endColumn":48},{"ruleId":"91","severity":1,"message":"101","line":28,"column":6,"nodeType":"93","endLine":28,"endColumn":8,"suggestions":"102"},{"ruleId":"85","severity":1,"message":"103","line":2,"column":17,"nodeType":"87","messageId":"88","endLine":2,"endColumn":26},{"ruleId":"91","severity":1,"message":"104","line":14,"column":6,"nodeType":"93","endLine":14,"endColumn":8,"suggestions":"105"},{"ruleId":"97","severity":1,"message":"98","line":26,"column":48,"nodeType":"99","messageId":"100","endLine":26,"endColumn":50},{"ruleId":"91","severity":1,"message":"106","line":21,"column":6,"nodeType":"93","endLine":21,"endColumn":8,"suggestions":"107"},"no-native-reassign",["108"],"no-negated-in-lhs",["109"],"no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","'useRef' is defined but never used.","'InView' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getZone'. Either include it or remove the dependency array.","ArrayExpression",["110"],["108"],["109"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has missing dependencies: 'comment.children', 'fetchUser', and 'getVotes'. Either include them or remove the dependency array.",["111"],"'useEffect' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchUser'. Either include it or remove the dependency array.",["112"],"React Hook useEffect has missing dependencies: 'fetchUser' and 'getVotes'. Either include them or remove the dependency array.",["113"],"no-global-assign","no-unsafe-negation",{"desc":"114","fix":"115"},{"desc":"116","fix":"117"},{"desc":"118","fix":"119"},{"desc":"120","fix":"121"},"Update the dependencies array to be: [getZone, props.currentZone]",{"range":"122","text":"123"},"Update the dependencies array to be: [comment.children, fetchUser, getVotes]",{"range":"124","text":"125"},"Update the dependencies array to be: [fetchUser]",{"range":"126","text":"127"},"Update the dependencies array to be: [fetchUser, getVotes]",{"range":"128","text":"129"},[868,887],"[getZone, props.currentZone]",[1091,1093],"[comment.children, fetchUser, getVotes]",[426,428],"[fetchUser]",[764,766],"[fetchUser, getVotes]"]